<?php

/**
 * @file
 * Defines the core Commerce product entity, including the entity itself, the
 * bundle definitions (product types), and various API functions to manage
 * products and interact with them through forms and autocompletes.
 */

/**
 * Implements hook_menu().
 */
function artx_product_menu()
{

  // Add a product.
  $items['commerce/products/add'] = array(
    'title' => 'Add a product',
    'description' => 'Add a new product for sale.',
    'page callback' => 'artx_product_ui_add_page',
//    'access callback' => TRUE,
//    'access callback' => 'commerce_product_ui_product_add_any_access',
    'weight' => 10,
  );
  foreach (artx_product_types() as $type => $product_type) {
    $items['commerce/products/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create !name',
      'title arguments' => array('!name' => $product_type['name']),
      'description' => $product_type['description'],
      'page callback' => 'artx_product_ui_product_form_wrapper',
      'page arguments' => array(artx_product_new($type)),
//      'access callback' => TRUE,
//      'access callback' => 'commerce_product_access',
//      'access arguments' => array('create', commerce_product_new($type)),
    );
  }

  // The overriden node/add type listing.
  $base = array(
    'page callback' => 'artx_product_add_page',
    'access callback' => '_art_add_access',
  );
  $items['node/add/add-art'] = array(
      'title' => 'Add an art work',
      'parent' => 'admin/commerce/manage-products/actions',
//      'type' => MENU_NORMAL_ITEM,
      'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    ) + $base;

  return $items;
}

/**
 * Implements hook_permission().
 */
function artx_product_permission() {
  $perms = array(
    'registed user content types' => array(
      'title' => t('Registed user content types'),
      'restrict access' => TRUE,
    ),
  );

  if (module_exists('node')) {
    module_load_include('module', 'node', 'node');
    if (function_exists('node_permissions_get_configured_types')){
      // Generate standard node permissions for all applicable node types.
      foreach (node_permissions_get_configured_types() as $type) {
        $perms += node_list_permissions($type);
      }
    }
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }

  return $perms;
}

/**
 * Access callback: Checks whether the user has permission to add a node.
 *
 * @return
 *   TRUE if the user has add permission, otherwise FALSE.
 *
 * @see node_menu()
 */
function _art_add_access() {
  $types = node_type_get_types();
  foreach ($types as $type) {
    if (node_hook($type->type, 'form') && node_access('create', $type->type)) {
      return TRUE;
    }
  }
  if (user_access('registed user content types')) {
    // There are no content types defined that the user has permission to create,
    // but the user does have the permission to administer the content types, so
    // grant them access to the page anyway.
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function artx_product_menu_alter(&$items) {
  if (isset($items['node/add/add-product'])) {
    unset($items['node/add/add-product']);
  }
  if (isset($items['node/add/add-content'])) {
    unset($items['node/add/add-content']);
  }
}

/**
 * Menu callback:
 */
function artx_product_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  // Bypass the node/add listing if only one content type is available.
  if (count($content) == 1) {
    $item = array_shift($content);
    drupal_goto($item['href']);
  }
  return theme('artx_product_add_list', array('content' => $content));
}

/**
 * Menu callback: display a list of product types that the user can create.
 */
function artx_product_ui_add_page()
{
  if (module_exists('commerce_product_ui')) {
    module_load_include('inc', 'commerce_product_ui', 'includes/commerce_product_ui.products');
    if (function_exists('commerce_product_ui_add_page'))
      return commerce_product_ui_add_page();
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Form callback wrapper: create or edit a product.
 *
 * @param $product
 *   The product object being edited by this form.
 *
 * @see commerce_product_product_form()
 */
function artx_product_ui_product_form_wrapper($product)
{
  if (module_exists('commerce_product_ui')) {
    module_load_include('inc', 'commerce_product_ui', 'includes/commerce_product_ui.products');
    if (function_exists('commerce_product_ui_product_form_wrapper'))
      return commerce_product_ui_product_form_wrapper($product);
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Returns an initialized product object.
 *
 * @param $type
 *   The machine-readable type of the product.
 *
 * @return
 *   A product object with all default fields initialized.
 */
function artx_product_new($type = '')
{
  if (module_exists('commerce_product')) {
    module_load_include('module', 'commerce_product');
    if (function_exists('commerce_product_new'))
      return commerce_product_new($type);
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Returns an array of product type arrays keyed by type.
 */
function artx_product_types() {
  if (module_exists('commerce_product')) {
    module_load_include('module', 'commerce_product');
    if (function_exists('commerce_product_types'))
      return commerce_product_types();
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Implements hook_theme().
 */
function artx_product_theme() {
  return array(
    'artx_product_add_list' => array(
      'variables' => array('content' => NULL),
    ),
  );
}

/**
 * Returns HTML for a list of available node types for node creation.
 *
 * @param $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @ingroup themeable
 */
function theme_artx_product_add_list($variables) {
  $content = $variables['content'];
  $output = '';

  if ($content) {
    $output = '<dl class="art-type-list">';
    foreach ($content as $item) {
      $output .= '<dt>' . l($item['title'], $item['href'], $item['localized_options']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  else {
    $output = '<p>' . t('You have not created any content types yet. Go to the <a href="@create-content">content type creation page</a> to add a new content type.', array('@create-content' => url('admin/structure/types/add'))) . '</p>';
  }
  return $output;
}

/**
 * wrapper of watchdog function to log the errors
 *
 * @param $err_type
 * @param $functionname
 */
function log2watchdog($err_type, $functionname)
{
  watchdog($err_type,
    'filename: '.basename(__FILE__).";\n functionname:".$functionname);
}

/**
 * Implements MODULE_preprocess_HOOK().
 *
 * For more information, see:
 * http://api.drupal.org/api/drupal/modules--system--theme.api.php/function/hook_preprocess_HOOK/7
 */
function artx_product_preprocess_page(&$vars) {
  $options = array(
    'group' => CSS_THEME,
    'every_page' => TRUE
  );
  drupal_add_css(drupal_get_path('module', 'artx_product') . '/css/artx_product.css', $options);
  $vars['styles'] = drupal_get_css();
}
/**
 * Implement hook_modules_implement_alter
 *
 * @param $implementations
 * @param $hook
 */
function artx_product_module_implements_alter(&$implementations, $hook)
{
//  if($hook == "menu_alter")
//  {
//    unset($implementations['artx_product']);
//    $mymodule = array('artx_product' => false);
//    $implementations = $implementations + $mymodule; // Also could use array_merge
//  }
}