<?php

/**
 * @file
 * Provides the artx_partner for use in Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function artx_partner_menu()
{
  $items = array();

  $items['user/%user/partner/delete/%'] = array(
    'page callback' => 'artx_partner_delete',
    'page arguments' => array(1, 4),
    'access callback' => 'artx_partner_access',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/config/partner'] = array(
    'title' => 'Partner configuration',
    'description' => 'Configure artx_partner',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('artx_partner_admin_form'),
    'access arguments' => array('administer artx_partner'),
    'file' => 'artx_partner.admin.inc',
  );

  $items['partner-actions'] = array(
    'page callback' => 'artx_partner_operations',
    'access arguments' => array('view own partner request list'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%/partners'] = array(
    'page callback' => 'artx_partner_view',
    'page arguments' => array(1),
    'description' => 'View all the pending/accepted partnerships',
    'access arguments' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function artx_partner_permission()
{
  return array(
    'view own partner request list' => array(
      'title' => t('View own artx_partner request list'),
      'description' => t('Allows a user to see their own artx_partner request list.'),
    ),
    'administer partner' => array(
      'title' => t('Administer partner'),
      'description' => t('Allows users to perform any action on partner. <em>Warning: Give to trusted roles only; this permission has security implications.</em>'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function artx_partner_form_alter(&$form, &$form_state, $form_id)
{
  global $user;
  if (!$user->uid) return;

  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    // check if product is disabled
    if (isset($form['submit']['#attributes']['disabled']) && ($form['submit']['#attributes']['disabled'] == 'disabled')) {
      return;
    }
    if (isset($form_state['build_info']['args'][0]->data['context']['view'])) {
      if ($form_state['build_info']['args'][0]->data['context']['view']['view_name'] == 'artx_partner') {
        return;
      }
    }
    if (in_array("orgranization", $user->roles)
      || in_array("administrator", $user->roles)
    ) {
      _artx_partner_form_alter_org($form, $form_state, $form_id);
    } else {
      _artx_partner_form_alter_artist($form, $form_state, $form_id);
    }
  }
}

function _artx_partner_form_alter_artist(&$form, &$form_state, $form_id)
{
  global $user;
  $status = 0;

  $product_id = $form_state['default_product']->product_id;
  $owner_uid = $form_state['default_product']->uid;
  $nid = _artx_partner_get_context_entity_id($form_state['context']);
  $invitationCnt = artx_partner_invitelist_length($user->uid, $product_id, $status);

  if ($status == 1) {
    // if partnership is established
    $url = 'gallery/' . $user->uid;
    $params = array(
      'attributes' => array(
        'class' => array('ajax' => 'use-ajax', 'view-partnerlist'),
        'id' => 'view-partnerlist-' . $product_id
      ),
      'query' => array(
        'destination' => $_GET['q'], 'token' => drupal_get_token()
      ),
    );
    if ($invitationCnt == 0) {
      $partnerMsg = l(t('0 partner request'), $url, $params);
    } else {
      $partnerMsg = l($invitationCnt, $url, $params) . t(' partner request');
    }
  } else {
    // if partnership is not established yet
    $url = 'user/' . $user->uid . '/partners';
    $params = array(
      'attributes' => array(
        'class' => array('ajax' => 'use-ajax', 'view-partnerlist'),
        'id' => 'view-partnerlist-' . $product_id
      ),
      'query' => array(
        'destination' => $_GET['q'], 'token' => drupal_get_token()
      ),
    );
    if ($invitationCnt == 0) {
      $partnerMsg = t('0 partner request');
    } else {
      $partnerMsg = t('@cnt partner request - ', array('@cnt' => $invitationCnt)) . l("view", $url, $params);
    }
  }

  $form['view_partners'] = array(
    '#markup' => $partnerMsg,
    '#weight' => variable_get('commerce_partner_req_weight', 14),
  );
}

function _artx_partner_form_alter_org(&$form, &$form_state, $form_id)
{
  global $user;
  $status = 0;

  $product_id = $form_state['default_product']->product_id;
  $owner_uid = $form_state['default_product']->uid;
  $nid = _artx_partner_get_context_entity_id($form_state['context']);
  $in_partnerlist = artx_partner_in_sentlist($user->uid, $product_id, $status);
  $link_exists = _artx_partner_link($user->uid, $status);

  $url = 'partner-actions/nojs/add/'
    . $user->uid . '/'
    . $product_id . '/'
    . $nid . '/'
    . $owner_uid;
  $params = array(
    'attributes' => array(
      'class' => array('ajax' => 'use-ajax', 'add-to-partnerlist'),
      'id' => 'add-partnerlist-' . $product_id
    ),
    'query' => array(
      'destination' => $_GET['q'], 'token' => drupal_get_token()
    ),
  );

  if (!$user->uid) {
    unset($params['attributes']['class']['ajax'], $params['query']);
    $params['query']['product_id'] = $product_id;
    $params['query']['nid'] = $nid;
    $params['query']['original_url'] = $_GET['q'];
    $url = 'user/login';
  }

  $link = l(t('Send partner request'), $url, $params);

  if ($in_partnerlist) $link = $link_exists;

  $form['add_to_partnerlist'] = array(
    '#markup' => $link,
    '#weight' => variable_get('commerce_partner_req_weight', 14),
  );

  $access = TRUE;
  $form['add_to_partnerlist']['#access'] = $access;


  if ($form_id == 'user_login' && !empty($_GET['product_id'])) {
    $form['#submit'][] = '_artx_partner_user_login';
  }
}

function artx_partner_view($uid)
{
  global $user;
  $sql = "SELECT ap.partner_id, ap.sender_uid, ap.owner_uid, ap.reqtime, ap.status, ap.nid, us.name";
  $sql .= "\nFROM {artx_partner} ap";
  $sql .= "\nJOIN {users} us";
  $sql .= "\nON us.uid=ap.sender_uid";
  $sql .= "\nWHERE ap.owner_uid = :uid";

  $rows = array();
  $result = db_query($sql, array(':uid' => $user->uid));
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $rows[] = $row;
    }
  }
  return $rows;
}

/**
 *
 */
function _artx_partner_user_login($form, &$form_state)
{
  if (!empty($form_state['sender_uid'])) {
    $url = 'partner-actions/nojs/add/' . $form_state['sender_uid'] . '/' . $_GET['product_id'] . '/' . $_GET['nid'];
    $form_state['redirect'] = array(
      $url,
      array(
        'query' => array(
          'destination' => $_GET['original_url'],
          'token' => drupal_get_token()
        ),
      ),
    );
  }
}

/**
 * Access callback: Delete the partnership product
 */
function artx_partner_delete($user, $partner_id)
{
  db_delete('artx_partner')
    ->condition('partner_id', $partner_id)
    ->execute();

  drupal_set_message(t('The product has been deleted from your partner list.'));
  drupal_goto('user/' . $user->uid . '/partners');
}

function artx_partner_invitelist_length($uid, $product_id, &$status, $nid = NULL)
{
  global $user;
  $sql = "SELECT COUNT(ap.owner_uid)";
  $sql .= "\nFROM {artx_partner} ap";
  $sql .= "\nWHERE ap.owner_uid = :uid";

  $result = db_query($sql, array(':uid' => $user->uid));
  $cnt = 0;
  if ($result) {
    $cnt = $result->fetchAssoc();
  }
  return array_shift(array_values($cnt));
}

/**
 * Verify if this prodcut has been added to partner list
 */
function artx_partner_in_sentlist($uid, $product_id, &$status, $nid = NULL)
{

  $conditions = db_and();
  $conditions->condition('sender_uid', $uid);
  $conditions->condition('product_id', $product_id);

  if ($nid) {
    $conditions->condition('nid', $nid);
  }

  $result = db_select('artx_partner', 'ap')
    ->addTag('partnerlist')
    ->fields('ap', array('partner_id', 'status'))
    ->condition($conditions)
    ->execute()
    ->fetchAssoc();

  if (isset ($result['partner_id'])) {
    $status = $result['status'];
    return true;
  }
  return false;
}

/**
 * Menu callback: Perform various actions (add to partnerlist etc)
 */
function artx_partner_operations()
{

  $args = func_get_args();
  $datetime = date("Y-m-d H:i:s", time());
  $status = 0;

  if ((isset($args[0]) && isset($args[1]) &&
      isset($args[2]) && isset($args[3])) && (isset($_GET['token']) && drupal_valid_token($_GET['token']))
  ) {
    switch ($args[1]) {
      case 'add' :
        if (artx_partner_in_sentlist($args[2], $args[3], $args[4], $status)) {
          return;
        }
        $fields = array('sender_uid' => $args[2],
          'product_id' => $args[3],
          'nid' => $args[4],
          'owner_uid' => $args[5],
          'reqtime' => $datetime);
        artx_partner_add_product($fields);
        break;
    }

    if ($args[0] == 'ajax') {
      $commands = array();
      switch ($args[1]) {
        case 'add' :
          $link = _artx_partner_link($args[2], $status);
          $commands[] = ajax_command_replace('a#add-partnerlist-' . $args[3], $link);
          break;
      }
      ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    } else {
      $destination = isset($_GET['destination']) ? $_GET['destination'] : '';
      drupal_goto($destination);
    }
  }
}

/**
 * Adds product to partner list
 */
function artx_partner_add_product($fields)
{
  return db_insert('artx_partner')
    ->fields($fields)
    ->execute();
}

/**
 * Returns html of "Already in partnership" link. TODO: themeable?
 */
function _artx_partner_link($uid, $status = 0)
{
  switch ($status) {
    case 0:
      return t('Request is sent, view <a class="in-partnerlist" target="_blank" href="@url">partnerships</a>', array(
        '@url' => url('user/' . $uid . '/partners')));
    case 1:
      return t('This art work is in partnership, view <a class="in-partnerlist" target="_blank" href="@url">partnerships</a>', array(
        '@url' => url('user/' . $uid . '/partners')));
  }
}

/**
 * Helper function for getting entity ID. There has been an API change in
 * Drupal Commerce 7.x-1.6 release. See https://drupal.org/node/1863776
 * @param $context
 *   The context array stored in $form_state
 * @return mixed
 *   An entity ID. NULL if couldn't figure out the entity ID.
 */
function _artx_partner_get_context_entity_id($context)
{
  // TODO: What if it's not a node?
  if ($context['entity_type'] == 'node') {
    if (isset($context['entity'])) {
      return $context['entity']->nid;
    } elseif (isset($context['entity_id'])) {
      return $context['entity_id'];
    }
  }
  return NULL;
}