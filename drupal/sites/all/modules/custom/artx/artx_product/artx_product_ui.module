<?php

/**
 * @file
 * Defines the core Commerce product entity, including the entity itself, the
 * bundle definitions (product types), and various API functions to manage
 * products and interact with them through forms and autocompletes.
 */

/**
 * Implements hook_menu().
 */
function artx_product_menu()
{

  // Add a product.
  $items['commerce/products/add'] = array(
    'title' => 'Add a product',
    'description' => 'Add a new product for sale.',
    'page callback' => 'artx_product_ui_add_page',
    'access callback' => TRUE,
//    'access callback' => 'commerce_product_ui_product_add_any_access',
    'weight' => 10,
  );
  foreach (artx_product_types() as $type => $product_type) {
    $items['commerce/products/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create !name',
      'title arguments' => array('!name' => $product_type['name']),
      'description' => $product_type['description'],
      'page callback' => 'artx_product_ui_product_form_wrapper',
      'page arguments' => array(artx_product_new($type)),
      'access callback' => TRUE,
//      'access callback' => 'commerce_product_access',
//      'access arguments' => array('create', commerce_product_new($type)),
    );
  }

  return $items;
}

/**
 * Menu callback: display a list of product types that the user can create.
 */
function artx_product_ui_add_page()
{
  if (module_exists('commerce_product_ui')) {
    module_load_include('inc', 'commerce_product_ui', 'includes/commerce_product_ui.products');
    if (function_exists('commerce_product_ui_add_page'))
      return commerce_product_ui_add_page();
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Form callback wrapper: create or edit a product.
 *
 * @param $product
 *   The product object being edited by this form.
 *
 * @see commerce_product_product_form()
 */
function artx_product_ui_product_form_wrapper($product)
{
  if (module_exists('commerce_product_ui')) {
    module_load_include('inc', 'commerce_product_ui', 'includes/commerce_product_ui.products');
    if (function_exists('commerce_product_ui_product_form_wrapper'))
      return commerce_product_ui_product_form_wrapper($product);
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Returns an initialized product object.
 *
 * @param $type
 *   The machine-readable type of the product.
 *
 * @return
 *   A product object with all default fields initialized.
 */
function artx_product_new($type = '')
{
  if (module_exists('commerce_product')) {
    module_load_include('module', 'commerce_product');
    if (function_exists('commerce_product_new'))
      return commerce_product_new($type);
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}

/**
 * Returns an array of product type arrays keyed by type.
 */
function artx_product_types() {
  if (module_exists('commerce_product')) {
    module_load_include('module', 'commerce_product');
    if (function_exists('commerce_product_types'))
      return commerce_product_types();
    else
      log2watchdog('function not found', __FUNCTION__);
  } else {
    log2watchdog('module not found', __FUNCTION__);
  }
  return null;
}



/**
 * wrapper of watchdog function to log the errors
 *
 * @param $err_type
 * @param $functionname
 */
function log2watchdog($err_type, $functionname)
{
  watchdog($err_type,
    'filename: '.basename(__FILE__).";\n functionname:".$functionname);
}